// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MarsQA_1.Feature
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Search")]
    public partial class SearchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Search.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Search", "\tValidate features in Search page", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search Skills --> by Filter Online")]
        public virtual void SearchSkills_ByFilterOnline()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search Skills --> by Filter Online", null, ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("user logs in to website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.And("user clicks the search icon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
 testRunner.When("user clicks the Online filter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.Then("the total item count of All Categories will be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search Skills --> by Filter Onsite")]
        public virtual void SearchSkills_ByFilterOnsite()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search Skills --> by Filter Onsite", null, ((string[])(null)));
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
 testRunner.Given("user logs in to website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.And("user clicks the search icon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.When("user clicks the Onsite filter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
 testRunner.Then("the total item count of All Categories will be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search Skills --> by Filter ShowAll")]
        public virtual void SearchSkills_ByFilterShowAll()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search Skills --> by Filter ShowAll", null, ((string[])(null)));
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 17
 testRunner.Given("user logs in to website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 18
 testRunner.And("user clicks the search icon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.And("user clicks the Onsite filter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.When("user clicks the ShowAll filter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.Then("the total item count of All Categories will be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search Skills --> Category")]
        [NUnit.Framework.TestCaseAttribute("Graphics & Design", null)]
        [NUnit.Framework.TestCaseAttribute("Digital Marketing", null)]
        [NUnit.Framework.TestCaseAttribute("Writing & Translation", null)]
        [NUnit.Framework.TestCaseAttribute("Video & Animation", null)]
        [NUnit.Framework.TestCaseAttribute("Music & Audio", null)]
        [NUnit.Framework.TestCaseAttribute("Programming & Tech", null)]
        [NUnit.Framework.TestCaseAttribute("Business", null)]
        [NUnit.Framework.TestCaseAttribute("Fun & Lifestyle", null)]
        public virtual void SearchSkills_Category(string category, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search Skills --> Category", null, exampleTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 24
 testRunner.Given("user logs in to website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 25
 testRunner.And("user clicks the search icon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.When(string.Format("user clicks \'{0}\' category", category), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
 testRunner.Then(string.Format("\'{0}\' will become the active category", category), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search Skills --> Subcategory")]
        [NUnit.Framework.TestCaseAttribute("Graphics & Design", "Logo Design", null)]
        [NUnit.Framework.TestCaseAttribute("Graphics & Design", "Book & Album covers", null)]
        [NUnit.Framework.TestCaseAttribute("Graphics & Design", "Flyers & Brochures", null)]
        [NUnit.Framework.TestCaseAttribute("Graphics & Design", "Web & Mobile Design", null)]
        [NUnit.Framework.TestCaseAttribute("Graphics & Design", "Search & Display Marketing", null)]
        [NUnit.Framework.TestCaseAttribute("Digital Marketing", "Social Media Marketing", null)]
        [NUnit.Framework.TestCaseAttribute("Digital Marketing", "Content Marketing", null)]
        [NUnit.Framework.TestCaseAttribute("Digital Marketing", "Video Marketing", null)]
        [NUnit.Framework.TestCaseAttribute("Digital Marketing", "Email Marketing", null)]
        [NUnit.Framework.TestCaseAttribute("Digital Marketing", "Search & Display Marketing", null)]
        [NUnit.Framework.TestCaseAttribute("Writing & Translation", "Resumes & Cover Letters", null)]
        [NUnit.Framework.TestCaseAttribute("Writing & Translation", "Proof Reading & Editing", null)]
        [NUnit.Framework.TestCaseAttribute("Writing & Translation", "Translation", null)]
        [NUnit.Framework.TestCaseAttribute("Writing & Translation", "Creative Writing", null)]
        [NUnit.Framework.TestCaseAttribute("Writing & Translation", "Business Copywriting", null)]
        [NUnit.Framework.TestCaseAttribute("Video & Animation", "Promotional Videos", null)]
        [NUnit.Framework.TestCaseAttribute("Video & Animation", "Editing & Post Production", null)]
        [NUnit.Framework.TestCaseAttribute("Video & Animation", "Lyric & Music Videos", null)]
        [NUnit.Framework.TestCaseAttribute("Video & Animation", "Other", null)]
        [NUnit.Framework.TestCaseAttribute("Music & Audio", "Mixing & Mastering", null)]
        [NUnit.Framework.TestCaseAttribute("Music & Audio", "Voice Over", null)]
        [NUnit.Framework.TestCaseAttribute("Music & Audio", "Song Writers & Composers", null)]
        [NUnit.Framework.TestCaseAttribute("Music & Audio", "Other", null)]
        [NUnit.Framework.TestCaseAttribute("Programming & Tech", "WordPress", null)]
        [NUnit.Framework.TestCaseAttribute("Programming & Tech", "Web & Mobile App", null)]
        [NUnit.Framework.TestCaseAttribute("Programming & Tech", "Data Analysis & Reports", null)]
        [NUnit.Framework.TestCaseAttribute("Programming & Tech", "QA", null)]
        [NUnit.Framework.TestCaseAttribute("Programming & Tech", "Databases", null)]
        [NUnit.Framework.TestCaseAttribute("Programming & Tech", "Other", null)]
        [NUnit.Framework.TestCaseAttribute("Business", "Business Tips", null)]
        [NUnit.Framework.TestCaseAttribute("Business", "Presentations", null)]
        [NUnit.Framework.TestCaseAttribute("Business", "Market Advice", null)]
        [NUnit.Framework.TestCaseAttribute("Business", "Legal Consulting", null)]
        [NUnit.Framework.TestCaseAttribute("Business", "Financial Consulting", null)]
        [NUnit.Framework.TestCaseAttribute("Business", "Other", null)]
        [NUnit.Framework.TestCaseAttribute("Fun & Lifestyle", "Online Lessons", null)]
        [NUnit.Framework.TestCaseAttribute("Fun & Lifestyle", "Relationship Advice", null)]
        [NUnit.Framework.TestCaseAttribute("Fun & Lifestyle", "Astrology", null)]
        [NUnit.Framework.TestCaseAttribute("Fun & Lifestyle", "Health, Nutrition & Fitness", null)]
        [NUnit.Framework.TestCaseAttribute("Fun & Lifestyle", "Gaming", null)]
        [NUnit.Framework.TestCaseAttribute("Fun & Lifestyle", "Other", null)]
        public virtual void SearchSkills_Subcategory(string category, string subcategory, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search Skills --> Subcategory", null, exampleTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 40
 testRunner.Given("user logs in to website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
 testRunner.And("user clicks the search icon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.And(string.Format("user clicks \'{0}\' category", category), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.When(string.Format("user clicks \'{0}\' subcategory", subcategory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
 testRunner.Then(string.Format("\'{0}\' will become the active subcategory", subcategory), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 45
 testRunner.And(string.Format("\'{0}\' will become the active category", category), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
